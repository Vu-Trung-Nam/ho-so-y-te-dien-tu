// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  PATIENT
  DOCTOR
  STAFF
  ADMIN
}

// tai khoan
model Account {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  email     String   @unique
  role      Role
  createdAt DateTime @default(now())
  patient   Patient?
  doctor    Doctor?
  staff     Staff?
}

// nhan vien
model Staff {
  id         Int       @id @default(autoincrement())
  accountId  Int?      @unique
  dob        DateTime?
  gender     String?
  fullName   String?
  position   String?
  phone      String?
  department String?
  account    Account?  @relation(fields: [accountId], references: [id])
}

// benh nhan
model Patient {
  id             Int             @id @default(autoincrement())
  accountId      Int?            @unique
  fullName       String?
  dob            DateTime?
  gender         String?
  phone          String?
  address        String?
  account        Account?        @relation(fields: [accountId], references: [id])
  appointments   Appointment[]
  prescriptions  Prescription[]
  bills          Bill[]
  medicalRecords MedicalRecord[]
}

// bac si
model Doctor {
  id             Int     @id @default(autoincrement())
  accountId      Int?    @unique
  userId         String  @unique
  fullName       String?
  specialization String?
  phone          String?
  department     String?

  account        Account?        @relation(fields: [accountId], references: [id])
  appointments   Appointment[]
  prescriptions  Prescription[]
  bills          Bill[]
  medicalRecords MedicalRecord[]
}

// lich kham
enum AppointmentStatus {
  NOTCOMFIRM
  CONFIRMED
  CANCELED
}

model Appointment {
  id              Int               @id @default(autoincrement())
  patientId       Int
  doctorId        Int?
  appointmentDate DateTime
  status          AppointmentStatus @default(NOTCOMFIRM)

  patient       Patient        @relation(fields: [patientId], references: [id])
  doctor        Doctor?        @relation(fields: [doctorId], references: [id])
  medicalRecord MedicalRecord?
}

// trang thai don thuoc
enum PrescriptionStatus {
  CANCELLED
  UNPAID
  PAID
}

// don thuoc
model Prescription {
  id        Int                @id @default(autoincrement())
  patientId Int
  doctorId  Int
  diagnosis String
  note      String?
  createdAt DateTime           @default(now())
  status    PrescriptionStatus @default(UNPAID) // CANCELLED, UNPAID, PAID

  patient               Patient                @relation(fields: [patientId], references: [id])
  doctor                Doctor                 @relation(fields: [doctorId], references: [id])
  prescriptionMedicines PrescriptionMedicine[]
  Bill                  Bill[]
  MedicalRecord         MedicalRecord[]
}

// Bảng trung gian
model PrescriptionMedicine {
  prescriptionId Int
  medicineId     Int
  quantity       Int // số lượng kê trong đơn
  dosage         String // liều dùng (VD: 1 viên)
  frequency      String // tần suất (VD: 3 lần/ngày)
  duration       Int // thời gian dùng (số ngày)
  note           String?

  prescription Prescription @relation(fields: [prescriptionId], references: [id])
  medicine     Medicine     @relation(fields: [medicineId], references: [id])

  @@id([prescriptionId, medicineId])
}

// thuoc
model Medicine {
  id    Int     @id @default(autoincrement())
  name  String
  unit  String // đơn vị (viên, chai, ống...)
  price Int // giá mỗi đơn vị
  stock Int // số lượng trong kho
  note  String?

  prescriptionMedicines PrescriptionMedicine[]
}

// hoa don
model Bill {
  id             Int       @id @default(autoincrement())
  patientId      Int
  doctorId       Int
  prescriptionId Int?
  totalAmount    Decimal
  status         String    @default("PENDING") // PENDING, PAID, CANCELLED
  createdAt      DateTime  @default(now())
  paidAt         DateTime?

  patient      Patient       @relation(fields: [patientId], references: [id])
  doctor       Doctor        @relation(fields: [doctorId], references: [id])
  prescription Prescription? @relation(fields: [prescriptionId], references: [id])
}

// so kham benh
model MedicalRecord {
  id              Int      @id @default(autoincrement())
  patientId       Int
  doctorId        Int
  prescriptionId  Int?
  appointmentId   Int      @unique
  examinationDate DateTime @default(now())
  diagnosis       String? // chẩn đoán
  symptoms        String? // triệu chứng
  note            String?

  patient      Patient       @relation(fields: [patientId], references: [id])
  doctor       Doctor        @relation(fields: [doctorId], references: [id])
  prescription Prescription? @relation(fields: [prescriptionId], references: [id])
  appointment  Appointment   @relation(fields: [appointmentId], references: [id])
}
